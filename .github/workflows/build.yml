name: Build/release

on: push

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node, NPM, Yarn
        uses: actions/setup-node@v3
      
      - name: Build/release Scene
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}

          # macOS code signing cert, see link for details (from the action author)
          # https://samuelmeuli.com/blog/2019-04-07-packaging-and-publishing-an-electron-app/
          mac_certs: ${{ secrets.TIRREL_DEVELOPMENT_CERT_BASE64 }}
          mac_certs_password: ${{ secrets.TIRREL_DEVELOPMENT_CERT_PASSWORD }}

          # Publish this release after building if the commit is tagged with
          # a version eg. v1.0.1
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}

          # additional args to electron-builder"
          args: "-c.extraMetadata.main=build/electron.js"
        env:
          # DO credentials for Spaces upload
          DO_KEY_ID: ${{ secrets.DO_KEY_ID }}
          DO_SECRET_KEY: ${{ secrets.DO_SECRET_KEY }}

          # Apple developer account id and single-app password.
          # electron-builder-notarize will sign in to apple's notarization
          # server with our apple id, upload the application bundle, and get
          # back a signed bundle for release.
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

          # Inject our public key for encrypting sensitive Circle payloads
          CIRCLE_PUBLIC_KEY: ${{ secrets.PRODUCTION_CIRCLE_PUBLIC_KEY }}

          # Production tirrel server
          REACT_APP_TIRRELSERVER: "https://planet.one"

          # Force env.CI false so that the linter won't treat warnings as errors
          CI: false
